import { AppFormProps, StringUnkownRecord, AppFormOptions } from '../../../pkg/types/types';
export declare const useAppFormStore: <TKey extends string, TFormRequest extends StringUnkownRecord = StringUnkownRecord, TApiRequest extends StringUnkownRecord = StringUnkownRecord, TApiResponse extends StringUnkownRecord = StringUnkownRecord, TFindRequestPropName extends string | undefined = "recordId", TFindResponsePropName extends string | undefined = "request", TFindCallbakResponse = unknown, TCallbakResponse = unknown>({ context }: AppFormProps<TKey, TFormRequest, TApiRequest, TApiResponse, TFindRequestPropName, TFindResponsePropName, TFindCallbakResponse, TCallbakResponse>) => import('pinia').StoreDefinition<string, Pick<{
    initialFormValue: StringUnkownRecord;
    validate: () => void;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementRef: import('vue').Ref<any, any>;
    clearForm: () => void;
    formValueRef: import('vue').Ref<StringUnkownRecord, StringUnkownRecord>;
    formOptions: AppFormOptions;
}, "initialFormValue" | "formElementRef" | "formValueRef" | "formOptions">, Pick<{
    initialFormValue: StringUnkownRecord;
    validate: () => void;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementRef: import('vue').Ref<any, any>;
    clearForm: () => void;
    formValueRef: import('vue').Ref<StringUnkownRecord, StringUnkownRecord>;
    formOptions: AppFormOptions;
}, "formValueString" | "activeInputs">, Pick<{
    initialFormValue: StringUnkownRecord;
    validate: () => void;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementRef: import('vue').Ref<any, any>;
    clearForm: () => void;
    formValueRef: import('vue').Ref<StringUnkownRecord, StringUnkownRecord>;
    formOptions: AppFormOptions;
}, "validate" | "setFormValue" | "presistForm" | "clearInput" | "setInputValue" | "resetForm" | "clearForm">>;
export declare const useAppFormStoreWithProps: <TKey extends string, TFormRequest extends StringUnkownRecord = StringUnkownRecord, TApiRequest extends StringUnkownRecord = StringUnkownRecord, TApiResponse extends StringUnkownRecord = StringUnkownRecord, TFindRequestPropName extends string | undefined = "recordId", TFindResponsePropName extends string | undefined = "request", TFindCallbakResponse = unknown, TCallbakResponse = unknown>(props: AppFormProps<TKey, TFormRequest, TApiRequest, TApiResponse, TFindRequestPropName, TFindResponsePropName, TFindCallbakResponse, TCallbakResponse>) => import('pinia').Store<string, Pick<{
    initialFormValue: StringUnkownRecord;
    validate: () => void;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementRef: import('vue').Ref<any, any>;
    clearForm: () => void;
    formValueRef: import('vue').Ref<StringUnkownRecord, StringUnkownRecord>;
    formOptions: AppFormOptions;
}, "initialFormValue" | "formElementRef" | "formValueRef" | "formOptions">, Pick<{
    initialFormValue: StringUnkownRecord;
    validate: () => void;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementRef: import('vue').Ref<any, any>;
    clearForm: () => void;
    formValueRef: import('vue').Ref<StringUnkownRecord, StringUnkownRecord>;
    formOptions: AppFormOptions;
}, "formValueString" | "activeInputs">, Pick<{
    initialFormValue: StringUnkownRecord;
    validate: () => void;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementRef: import('vue').Ref<any, any>;
    clearForm: () => void;
    formValueRef: import('vue').Ref<StringUnkownRecord, StringUnkownRecord>;
    formOptions: AppFormOptions;
}, "validate" | "setFormValue" | "presistForm" | "clearInput" | "setInputValue" | "resetForm" | "clearForm">>;
export declare const useAppFormStoreWithKey: (formKey: string) => import('pinia').Store<string, Pick<{
    initialFormValue: StringUnkownRecord;
    validate: () => void;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementRef: import('vue').Ref<any, any>;
    clearForm: () => void;
    formValueRef: import('vue').Ref<StringUnkownRecord, StringUnkownRecord>;
    formOptions: AppFormOptions;
}, "initialFormValue" | "formElementRef" | "formValueRef" | "formOptions">, Pick<{
    initialFormValue: StringUnkownRecord;
    validate: () => void;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementRef: import('vue').Ref<any, any>;
    clearForm: () => void;
    formValueRef: import('vue').Ref<StringUnkownRecord, StringUnkownRecord>;
    formOptions: AppFormOptions;
}, "formValueString" | "activeInputs">, Pick<{
    initialFormValue: StringUnkownRecord;
    validate: () => void;
    setFormValue: (value: StringUnkownRecord) => Promise<void>;
    presistForm: () => void;
    formValueString: import('vue').ComputedRef<string>;
    clearInput: (inputName: string) => Promise<void>;
    activeInputs: import('vue').ComputedRef<StringUnkownRecord>;
    setInputValue: (inputName: string, inputValue: unknown) => Promise<void>;
    resetForm: () => void;
    formElementRef: import('vue').Ref<any, any>;
    clearForm: () => void;
    formValueRef: import('vue').Ref<StringUnkownRecord, StringUnkownRecord>;
    formOptions: AppFormOptions;
}, "validate" | "setFormValue" | "presistForm" | "clearInput" | "setInputValue" | "resetForm" | "clearForm">>;
